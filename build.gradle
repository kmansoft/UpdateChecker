buildscript {

	ext {
		gradle_version = '3.3+'

		def version = project.properties["ANDROID_GRADLE_TOOLS_VERSION"]
		if (version) {
			gradle_version = version.tokenize(':').last()
		}

		kotlin_version = '1.3.0+'
		coroutines_version = '1.0.0+'
		okhttp_version = '3.11+'
		result_version = '1.6.0'

		// We want native material and JobScheduler
		sdk_min = 21
		// But do not want "cannot expose file:// uri's which is new in 7.0 (24)
		sdk_target = 23
		// And do not want new deprecations as much as possible
		sdk_compile = 27

	}
	repositories {
		google()
		jcenter()
	}
	dependencies {
		classpath "com.android.tools.build:gradle:$gradle_version"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
	}
}

allprojects {
	repositories {
		google()
		jcenter()
	}
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

// apply plugin: 'kotlin-android-extensions'

ext {
	VERSION_NAME = "0.1"
	VERSION_CODE = 7
}

android {
	compileSdkVersion sdk_compile

	defaultConfig {
		applicationId "org.kman.updatechecker"

		minSdkVersion sdk_min
		targetSdkVersion sdk_target

		versionName "${VERSION_NAME}-${VERSION_CODE}"
		versionCode VERSION_CODE

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}

	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}
}

dependencies {
	//implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

	//implementation "com.github.kittinunf.result:result:$result_version"

	implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

	testImplementation 'junit:junit:4.12'

	androidTestImplementation 'com.android.support.test:runner:1.0.2'
	androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def RELEASE_BUILD_FILE = new File(project.projectDir, "build.release.gradle")
if (RELEASE_BUILD_FILE.exists()) {
	apply from: RELEASE_BUILD_FILE
}
